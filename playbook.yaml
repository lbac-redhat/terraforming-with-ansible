---
- name: Terraforming with Ansible
  hosts: all
  vars_files:
    - vault.yaml
  vars:
    tf_vars:
      machines:
        machine1:
          vCPUs: 2
          memory: 1024
        machine2:
          vCPUs: 1
          memory: 512

  environment:
    AWS_ACCESS_KEY_ID: "{{ vault.s3.access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ vault.s3.secret_access_key }}"

  tasks:
    - name: Clone the github repository
      ansible.builtin.git:
        repo: https://github.com/lbac-redhat/terraforming-with-ansible.git
        dest: repo
        clone: true
        force: true

    - name: Run terraform plan
      cloud.terraform.terraform:
        project_path: ./repo/terraform
        state: planned
        plan_file: tf.plan
        force_init: true
          # init_reconfigure: true
        complex_vars: true
        variables: "{{ tf_vars }}"
        backend_config:
          bucket: "terraform-luka"
          key: "terraform.tfstate"
          region: "eu-north-1"
          dynamodb_table: "tf.kim"

      # check_mode: false
      changed_when: false
      register: tf_plan

    - name: Print plan
      debug:
        msg: "{{ tf_plan.stdout_lines }}"

    - name: Apply plan
      cloud.terraform.terraform:
        project_path: repo/terraform
        state: present
        plan_file: tf.plan
      changed_when: '"Apply complete! Resources: 0 added, 0 changed, 0 destroyed." not in apply_status.stdout'
      register: apply_status

    - name: Read outputs from project path
      cloud.terraform.terraform_output:
        project_path: repo/terraform
      register: tf_output

    - debug:
       var: tf_output

    - name: Clone the inventory repository
      ansible.builtin.git:
        repo: https://github.com/lbac-redhat/terraforming-with-ansible-state.git
        dest: aap-inventory
        clone: true
        force: true

    - name: Write inventory
      ansible.builtin.template:
        src: templates/inventory.j2
        dest: aap-inventory/inventory

    - name: Write SSH identity
      ansible.builtin.copy:
        content: "{{ vault.git.sshkey }}"
        dest: .ssh/id_ansible
        mode: 0600

    - name: Commit the inventory to the local repository
      command:
        cmd: "git -c user.name='{{ vault.git.user }}' -c user.email='{{ vault.git.email }}' commit -a -m 'Updating inventory'"
        chdir: aap-inventory
      register: result
      failed_when: result.rc != 0 and "nothing to commit, working tree clean" not in result.stdout
      changed_when: '"nothing to commit, working tree clean" not in result.stdout'

    - name: Push the inventory to the remote repository
      command:
        cmd: "git -c core.sshCommand='ssh -i ../.ssh/id_ansible -o IdentitiesOnly=yes' push"
        chdir: aap-inventory
      register: result
      changed_when: '"Everything up-to-date" not in result.stderr'
